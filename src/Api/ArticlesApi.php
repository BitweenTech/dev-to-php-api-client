<?php
/**
 * ArticlesApi
 * PHP version 7.2
 *
 * @category Class
 * @package  Bitween\DevTo
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * DEV API (beta)
 *
 * Access Forem articles, users and other resources via API.  For a real-world example of Forem in action, check out [DEV](https://www.dev.to).  All endpoints that don't require authentication are CORS enabled.  Dates and date times, unless otherwise specified, must be in the [RFC 3339](https://tools.ietf.org/html/rfc3339) format.  # Authentication  <!-- ReDoc-Inject: <security-definitions> -->
 *
 * The version of the OpenAPI document: 0.9.5
 * Contact: yo@dev.to
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.0.1
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Bitween\DevTo\Api;

use Bitween\DevTo\ApiException;
use Bitween\DevTo\Configuration;
use Bitween\DevTo\HeaderSelector;
use Bitween\DevTo\ObjectSerializer;
use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;

/**
 * ArticlesApi Class Doc Comment
 *
 * @category Class
 * @package  Bitween\DevTo
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class ArticlesApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @var int Host index
     */
    protected $hostIndex;

    /**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     * @param int             $hostIndex (Optional) host index to select the list of hosts if defined in the OpenAPI spec
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null,
        $hostIndex = 0
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
        $this->hostIndex = $hostIndex;
    }

    /**
     * Set the host index
     *
     * @param int $hostIndex Host index (required)
     */
    public function setHostIndex($hostIndex)
    {
        $this->hostIndex = $hostIndex;
    }

    /**
     * Get the host index
     *
     * @return int Host index
     */
    public function getHostIndex()
    {
        return $this->hostIndex;
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation createArticle
     *
     * Create a new article
     *
     * @param  \Bitween\DevTo\Model\ArticleCreate $articleCreate Article to create (optional)
     *
     * @throws \Bitween\DevTo\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Bitween\DevTo\Model\ArticleShow|\Bitween\DevTo\Model\APIError|\Bitween\DevTo\Model\APIError|\Bitween\DevTo\Model\APIError|\Bitween\DevTo\Model\APIError|\Bitween\DevTo\Model\APIError
     */
    public function createArticle($articleCreate = null)
    {
        list($response) = $this->createArticleWithHttpInfo($articleCreate);
        return $response;
    }

    /**
     * Operation createArticleWithHttpInfo
     *
     * Create a new article
     *
     * @param  \Bitween\DevTo\Model\ArticleCreate $articleCreate Article to create (optional)
     *
     * @throws \Bitween\DevTo\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Bitween\DevTo\Model\ArticleShow|\Bitween\DevTo\Model\APIError|\Bitween\DevTo\Model\APIError|\Bitween\DevTo\Model\APIError|\Bitween\DevTo\Model\APIError|\Bitween\DevTo\Model\APIError, HTTP status code, HTTP response headers (array of strings)
     */
    public function createArticleWithHttpInfo($articleCreate = null)
    {
        $request = $this->createArticleRequest($articleCreate);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            switch($statusCode) {
                case 201:
                    if ('\Bitween\DevTo\Model\ArticleShow' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Bitween\DevTo\Model\ArticleShow', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('\Bitween\DevTo\Model\APIError' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Bitween\DevTo\Model\APIError', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 401:
                    if ('\Bitween\DevTo\Model\APIError' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Bitween\DevTo\Model\APIError', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 403:
                    if ('\Bitween\DevTo\Model\APIError' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Bitween\DevTo\Model\APIError', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 422:
                    if ('\Bitween\DevTo\Model\APIError' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Bitween\DevTo\Model\APIError', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 429:
                    if ('\Bitween\DevTo\Model\APIError' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Bitween\DevTo\Model\APIError', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Bitween\DevTo\Model\ArticleShow';
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = (string) $responseBody;
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 201:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Bitween\DevTo\Model\ArticleShow',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Bitween\DevTo\Model\APIError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Bitween\DevTo\Model\APIError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Bitween\DevTo\Model\APIError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 422:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Bitween\DevTo\Model\APIError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 429:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Bitween\DevTo\Model\APIError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation createArticleAsync
     *
     * Create a new article
     *
     * @param  \Bitween\DevTo\Model\ArticleCreate $articleCreate Article to create (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createArticleAsync($articleCreate = null)
    {
        return $this->createArticleAsyncWithHttpInfo($articleCreate)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation createArticleAsyncWithHttpInfo
     *
     * Create a new article
     *
     * @param  \Bitween\DevTo\Model\ArticleCreate $articleCreate Article to create (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createArticleAsyncWithHttpInfo($articleCreate = null)
    {
        $returnType = '\Bitween\DevTo\Model\ArticleShow';
        $request = $this->createArticleRequest($articleCreate);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'createArticle'
     *
     * @param  \Bitween\DevTo\Model\ArticleCreate $articleCreate Article to create (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function createArticleRequest($articleCreate = null)
    {

        $resourcePath = '/articles';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($articleCreate)) {
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($articleCreate));
            } else {
                $httpBody = $articleCreate;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('api-key');
        if ($apiKey !== null) {
            $headers['api-key'] = $apiKey;
        }
        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }
        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getArticleById
     *
     * A published article by ID
     *
     * @param  int $id Id of the article (required)
     *
     * @throws \Bitween\DevTo\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Bitween\DevTo\Model\ArticleShow|\Bitween\DevTo\Model\APIError
     */
    public function getArticleById($id)
    {
        list($response) = $this->getArticleByIdWithHttpInfo($id);
        return $response;
    }

    /**
     * Operation getArticleByIdWithHttpInfo
     *
     * A published article by ID
     *
     * @param  int $id Id of the article (required)
     *
     * @throws \Bitween\DevTo\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Bitween\DevTo\Model\ArticleShow|\Bitween\DevTo\Model\APIError, HTTP status code, HTTP response headers (array of strings)
     */
    public function getArticleByIdWithHttpInfo($id)
    {
        $request = $this->getArticleByIdRequest($id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            switch($statusCode) {
                case 200:
                    if ('\Bitween\DevTo\Model\ArticleShow' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Bitween\DevTo\Model\ArticleShow', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 404:
                    if ('\Bitween\DevTo\Model\APIError' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Bitween\DevTo\Model\APIError', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Bitween\DevTo\Model\ArticleShow';
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = (string) $responseBody;
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Bitween\DevTo\Model\ArticleShow',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Bitween\DevTo\Model\APIError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getArticleByIdAsync
     *
     * A published article by ID
     *
     * @param  int $id Id of the article (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getArticleByIdAsync($id)
    {
        return $this->getArticleByIdAsyncWithHttpInfo($id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getArticleByIdAsyncWithHttpInfo
     *
     * A published article by ID
     *
     * @param  int $id Id of the article (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getArticleByIdAsyncWithHttpInfo($id)
    {
        $returnType = '\Bitween\DevTo\Model\ArticleShow';
        $request = $this->getArticleByIdRequest($id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getArticleById'
     *
     * @param  int $id Id of the article (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getArticleByIdRequest($id)
    {
        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling getArticleById'
            );
        }
        if ($id < 1) {
            throw new \InvalidArgumentException('invalid value for "$id" when calling ArticlesApi.getArticleById, must be bigger than or equal to 1.');
        }


        $resourcePath = '/articles/{id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getArticleByPath
     *
     * A published article by path
     *
     * @param  string $username User or organization username. (required)
     * @param  string $slug Slug of the article. (required)
     *
     * @throws \Bitween\DevTo\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Bitween\DevTo\Model\ArticleShow|\Bitween\DevTo\Model\APIError
     */
    public function getArticleByPath($username, $slug)
    {
        list($response) = $this->getArticleByPathWithHttpInfo($username, $slug);
        return $response;
    }

    /**
     * Operation getArticleByPathWithHttpInfo
     *
     * A published article by path
     *
     * @param  string $username User or organization username. (required)
     * @param  string $slug Slug of the article. (required)
     *
     * @throws \Bitween\DevTo\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Bitween\DevTo\Model\ArticleShow|\Bitween\DevTo\Model\APIError, HTTP status code, HTTP response headers (array of strings)
     */
    public function getArticleByPathWithHttpInfo($username, $slug)
    {
        $request = $this->getArticleByPathRequest($username, $slug);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            switch($statusCode) {
                case 200:
                    if ('\Bitween\DevTo\Model\ArticleShow' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Bitween\DevTo\Model\ArticleShow', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 404:
                    if ('\Bitween\DevTo\Model\APIError' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Bitween\DevTo\Model\APIError', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Bitween\DevTo\Model\ArticleShow';
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = (string) $responseBody;
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Bitween\DevTo\Model\ArticleShow',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Bitween\DevTo\Model\APIError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getArticleByPathAsync
     *
     * A published article by path
     *
     * @param  string $username User or organization username. (required)
     * @param  string $slug Slug of the article. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getArticleByPathAsync($username, $slug)
    {
        return $this->getArticleByPathAsyncWithHttpInfo($username, $slug)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getArticleByPathAsyncWithHttpInfo
     *
     * A published article by path
     *
     * @param  string $username User or organization username. (required)
     * @param  string $slug Slug of the article. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getArticleByPathAsyncWithHttpInfo($username, $slug)
    {
        $returnType = '\Bitween\DevTo\Model\ArticleShow';
        $request = $this->getArticleByPathRequest($username, $slug);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getArticleByPath'
     *
     * @param  string $username User or organization username. (required)
     * @param  string $slug Slug of the article. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getArticleByPathRequest($username, $slug)
    {
        // verify the required parameter 'username' is set
        if ($username === null || (is_array($username) && count($username) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $username when calling getArticleByPath'
            );
        }
        // verify the required parameter 'slug' is set
        if ($slug === null || (is_array($slug) && count($slug) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $slug when calling getArticleByPath'
            );
        }

        $resourcePath = '/articles/{username}/{slug}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($username !== null) {
            $resourcePath = str_replace(
                '{' . 'username' . '}',
                ObjectSerializer::toPathValue($username),
                $resourcePath
            );
        }
        // path params
        if ($slug !== null) {
            $resourcePath = str_replace(
                '{' . 'slug' . '}',
                ObjectSerializer::toPathValue($slug),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getArticles
     *
     * Published articles
     *
     * @param  int $page Pagination page. (optional, default to 1)
     * @param  int $perPage Page size (the number of items to return per page). (optional, default to 30)
     * @param  string $tag Using this parameter will retrieve articles that contain the requested tag.  Articles will be ordered by descending popularity.  This parameter can be used in conjuction with &#x60;top&#x60;. (optional)
     * @param  string $tags Using this parameter will retrieve articles with any of the comma-separated tags.  Articles will be ordered by descending popularity. (optional)
     * @param  string $tagsExclude Using this parameter will retrieve articles that do _not_ contain _any_ of comma-separated tags.  Articles will be ordered by descending popularity. (optional)
     * @param  string $username Using this parameter will retrieve articles belonging to a User or Organization ordered by descending publication date.  If &#x60;state&#x3D;all&#x60; the number of items returned will be &#x60;1000&#x60; instead of the default &#x60;30&#x60;.  This parameter can be used in conjuction with &#x60;state&#x60;. (optional)
     * @param  string $state Using this parameter will allow the client to check which articles are fresh or rising.  If &#x60;state&#x3D;fresh&#x60; the server will return fresh articles. If &#x60;state&#x3D;rising&#x60; the server will return rising articles.  This param can be used in conjuction with &#x60;username&#x60;, only if set to &#x60;all&#x60;. (optional)
     * @param  int $top Using this parameter will allow the client to return the most popular articles in the last &#x60;N&#x60; days.  &#x60;top&#x60; indicates the number of days since publication of the articles returned.  This param can be used in conjuction with &#x60;tag&#x60;. (optional)
     * @param  int $collectionId Adding this will allow the client to return the list of articles belonging to the requested collection, ordered by ascending publication date. (optional)
     *
     * @throws \Bitween\DevTo\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Bitween\DevTo\Model\ArticleIndex[]
     */
    public function getArticles($page = 1, $perPage = 30, $tag = null, $tags = null, $tagsExclude = null, $username = null, $state = null, $top = null, $collectionId = null)
    {
        list($response) = $this->getArticlesWithHttpInfo($page, $perPage, $tag, $tags, $tagsExclude, $username, $state, $top, $collectionId);
        return $response;
    }

    /**
     * Operation getArticlesWithHttpInfo
     *
     * Published articles
     *
     * @param  int $page Pagination page. (optional, default to 1)
     * @param  int $perPage Page size (the number of items to return per page). (optional, default to 30)
     * @param  string $tag Using this parameter will retrieve articles that contain the requested tag.  Articles will be ordered by descending popularity.  This parameter can be used in conjuction with &#x60;top&#x60;. (optional)
     * @param  string $tags Using this parameter will retrieve articles with any of the comma-separated tags.  Articles will be ordered by descending popularity. (optional)
     * @param  string $tagsExclude Using this parameter will retrieve articles that do _not_ contain _any_ of comma-separated tags.  Articles will be ordered by descending popularity. (optional)
     * @param  string $username Using this parameter will retrieve articles belonging to a User or Organization ordered by descending publication date.  If &#x60;state&#x3D;all&#x60; the number of items returned will be &#x60;1000&#x60; instead of the default &#x60;30&#x60;.  This parameter can be used in conjuction with &#x60;state&#x60;. (optional)
     * @param  string $state Using this parameter will allow the client to check which articles are fresh or rising.  If &#x60;state&#x3D;fresh&#x60; the server will return fresh articles. If &#x60;state&#x3D;rising&#x60; the server will return rising articles.  This param can be used in conjuction with &#x60;username&#x60;, only if set to &#x60;all&#x60;. (optional)
     * @param  int $top Using this parameter will allow the client to return the most popular articles in the last &#x60;N&#x60; days.  &#x60;top&#x60; indicates the number of days since publication of the articles returned.  This param can be used in conjuction with &#x60;tag&#x60;. (optional)
     * @param  int $collectionId Adding this will allow the client to return the list of articles belonging to the requested collection, ordered by ascending publication date. (optional)
     *
     * @throws \Bitween\DevTo\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Bitween\DevTo\Model\ArticleIndex[], HTTP status code, HTTP response headers (array of strings)
     */
    public function getArticlesWithHttpInfo($page = 1, $perPage = 30, $tag = null, $tags = null, $tagsExclude = null, $username = null, $state = null, $top = null, $collectionId = null)
    {
        $request = $this->getArticlesRequest($page, $perPage, $tag, $tags, $tagsExclude, $username, $state, $top, $collectionId);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            switch($statusCode) {
                case 200:
                    if ('\Bitween\DevTo\Model\ArticleIndex[]' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Bitween\DevTo\Model\ArticleIndex[]', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Bitween\DevTo\Model\ArticleIndex[]';
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = (string) $responseBody;
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Bitween\DevTo\Model\ArticleIndex[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getArticlesAsync
     *
     * Published articles
     *
     * @param  int $page Pagination page. (optional, default to 1)
     * @param  int $perPage Page size (the number of items to return per page). (optional, default to 30)
     * @param  string $tag Using this parameter will retrieve articles that contain the requested tag.  Articles will be ordered by descending popularity.  This parameter can be used in conjuction with &#x60;top&#x60;. (optional)
     * @param  string $tags Using this parameter will retrieve articles with any of the comma-separated tags.  Articles will be ordered by descending popularity. (optional)
     * @param  string $tagsExclude Using this parameter will retrieve articles that do _not_ contain _any_ of comma-separated tags.  Articles will be ordered by descending popularity. (optional)
     * @param  string $username Using this parameter will retrieve articles belonging to a User or Organization ordered by descending publication date.  If &#x60;state&#x3D;all&#x60; the number of items returned will be &#x60;1000&#x60; instead of the default &#x60;30&#x60;.  This parameter can be used in conjuction with &#x60;state&#x60;. (optional)
     * @param  string $state Using this parameter will allow the client to check which articles are fresh or rising.  If &#x60;state&#x3D;fresh&#x60; the server will return fresh articles. If &#x60;state&#x3D;rising&#x60; the server will return rising articles.  This param can be used in conjuction with &#x60;username&#x60;, only if set to &#x60;all&#x60;. (optional)
     * @param  int $top Using this parameter will allow the client to return the most popular articles in the last &#x60;N&#x60; days.  &#x60;top&#x60; indicates the number of days since publication of the articles returned.  This param can be used in conjuction with &#x60;tag&#x60;. (optional)
     * @param  int $collectionId Adding this will allow the client to return the list of articles belonging to the requested collection, ordered by ascending publication date. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getArticlesAsync($page = 1, $perPage = 30, $tag = null, $tags = null, $tagsExclude = null, $username = null, $state = null, $top = null, $collectionId = null)
    {
        return $this->getArticlesAsyncWithHttpInfo($page, $perPage, $tag, $tags, $tagsExclude, $username, $state, $top, $collectionId)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getArticlesAsyncWithHttpInfo
     *
     * Published articles
     *
     * @param  int $page Pagination page. (optional, default to 1)
     * @param  int $perPage Page size (the number of items to return per page). (optional, default to 30)
     * @param  string $tag Using this parameter will retrieve articles that contain the requested tag.  Articles will be ordered by descending popularity.  This parameter can be used in conjuction with &#x60;top&#x60;. (optional)
     * @param  string $tags Using this parameter will retrieve articles with any of the comma-separated tags.  Articles will be ordered by descending popularity. (optional)
     * @param  string $tagsExclude Using this parameter will retrieve articles that do _not_ contain _any_ of comma-separated tags.  Articles will be ordered by descending popularity. (optional)
     * @param  string $username Using this parameter will retrieve articles belonging to a User or Organization ordered by descending publication date.  If &#x60;state&#x3D;all&#x60; the number of items returned will be &#x60;1000&#x60; instead of the default &#x60;30&#x60;.  This parameter can be used in conjuction with &#x60;state&#x60;. (optional)
     * @param  string $state Using this parameter will allow the client to check which articles are fresh or rising.  If &#x60;state&#x3D;fresh&#x60; the server will return fresh articles. If &#x60;state&#x3D;rising&#x60; the server will return rising articles.  This param can be used in conjuction with &#x60;username&#x60;, only if set to &#x60;all&#x60;. (optional)
     * @param  int $top Using this parameter will allow the client to return the most popular articles in the last &#x60;N&#x60; days.  &#x60;top&#x60; indicates the number of days since publication of the articles returned.  This param can be used in conjuction with &#x60;tag&#x60;. (optional)
     * @param  int $collectionId Adding this will allow the client to return the list of articles belonging to the requested collection, ordered by ascending publication date. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getArticlesAsyncWithHttpInfo($page = 1, $perPage = 30, $tag = null, $tags = null, $tagsExclude = null, $username = null, $state = null, $top = null, $collectionId = null)
    {
        $returnType = '\Bitween\DevTo\Model\ArticleIndex[]';
        $request = $this->getArticlesRequest($page, $perPage, $tag, $tags, $tagsExclude, $username, $state, $top, $collectionId);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getArticles'
     *
     * @param  int $page Pagination page. (optional, default to 1)
     * @param  int $perPage Page size (the number of items to return per page). (optional, default to 30)
     * @param  string $tag Using this parameter will retrieve articles that contain the requested tag.  Articles will be ordered by descending popularity.  This parameter can be used in conjuction with &#x60;top&#x60;. (optional)
     * @param  string $tags Using this parameter will retrieve articles with any of the comma-separated tags.  Articles will be ordered by descending popularity. (optional)
     * @param  string $tagsExclude Using this parameter will retrieve articles that do _not_ contain _any_ of comma-separated tags.  Articles will be ordered by descending popularity. (optional)
     * @param  string $username Using this parameter will retrieve articles belonging to a User or Organization ordered by descending publication date.  If &#x60;state&#x3D;all&#x60; the number of items returned will be &#x60;1000&#x60; instead of the default &#x60;30&#x60;.  This parameter can be used in conjuction with &#x60;state&#x60;. (optional)
     * @param  string $state Using this parameter will allow the client to check which articles are fresh or rising.  If &#x60;state&#x3D;fresh&#x60; the server will return fresh articles. If &#x60;state&#x3D;rising&#x60; the server will return rising articles.  This param can be used in conjuction with &#x60;username&#x60;, only if set to &#x60;all&#x60;. (optional)
     * @param  int $top Using this parameter will allow the client to return the most popular articles in the last &#x60;N&#x60; days.  &#x60;top&#x60; indicates the number of days since publication of the articles returned.  This param can be used in conjuction with &#x60;tag&#x60;. (optional)
     * @param  int $collectionId Adding this will allow the client to return the list of articles belonging to the requested collection, ordered by ascending publication date. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getArticlesRequest($page = 1, $perPage = 30, $tag = null, $tags = null, $tagsExclude = null, $username = null, $state = null, $top = null, $collectionId = null)
    {
        if ($page !== null && $page < 1) {
            throw new \InvalidArgumentException('invalid value for "$page" when calling ArticlesApi.getArticles, must be bigger than or equal to 1.');
        }

        if ($perPage !== null && $perPage > 1000) {
            throw new \InvalidArgumentException('invalid value for "$perPage" when calling ArticlesApi.getArticles, must be smaller than or equal to 1000.');
        }
        if ($perPage !== null && $perPage < 1) {
            throw new \InvalidArgumentException('invalid value for "$perPage" when calling ArticlesApi.getArticles, must be bigger than or equal to 1.');
        }

        if ($top !== null && $top < 1) {
            throw new \InvalidArgumentException('invalid value for "$top" when calling ArticlesApi.getArticles, must be bigger than or equal to 1.');
        }


        $resourcePath = '/articles';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($page !== null) {
            if('form' === 'form' && is_array($page)) {
                foreach($page as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['page'] = $page;
            }
        }
        // query params
        if ($perPage !== null) {
            if('form' === 'form' && is_array($perPage)) {
                foreach($perPage as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['per_page'] = $perPage;
            }
        }
        // query params
        if ($tag !== null) {
            if('form' === 'form' && is_array($tag)) {
                foreach($tag as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['tag'] = $tag;
            }
        }
        // query params
        if ($tags !== null) {
            if('form' === 'form' && is_array($tags)) {
                foreach($tags as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['tags'] = $tags;
            }
        }
        // query params
        if ($tagsExclude !== null) {
            if('form' === 'form' && is_array($tagsExclude)) {
                foreach($tagsExclude as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['tags_exclude'] = $tagsExclude;
            }
        }
        // query params
        if ($username !== null) {
            if('form' === 'form' && is_array($username)) {
                foreach($username as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['username'] = $username;
            }
        }
        // query params
        if ($state !== null) {
            if('form' === 'form' && is_array($state)) {
                foreach($state as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['state'] = $state;
            }
        }
        // query params
        if ($top !== null) {
            if('form' === 'form' && is_array($top)) {
                foreach($top as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['top'] = $top;
            }
        }
        // query params
        if ($collectionId !== null) {
            if('form' === 'form' && is_array($collectionId)) {
                foreach($collectionId as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['collection_id'] = $collectionId;
            }
        }




        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getArticlesWithVideo
     *
     * Articles with a video
     *
     * @param  int $page Pagination page. (optional, default to 1)
     * @param  int $perPage Page size (the number of items to return per page). (optional, default to 24)
     *
     * @throws \Bitween\DevTo\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Bitween\DevTo\Model\ArticleVideo[]
     */
    public function getArticlesWithVideo($page = 1, $perPage = 24)
    {
        list($response) = $this->getArticlesWithVideoWithHttpInfo($page, $perPage);
        return $response;
    }

    /**
     * Operation getArticlesWithVideoWithHttpInfo
     *
     * Articles with a video
     *
     * @param  int $page Pagination page. (optional, default to 1)
     * @param  int $perPage Page size (the number of items to return per page). (optional, default to 24)
     *
     * @throws \Bitween\DevTo\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Bitween\DevTo\Model\ArticleVideo[], HTTP status code, HTTP response headers (array of strings)
     */
    public function getArticlesWithVideoWithHttpInfo($page = 1, $perPage = 24)
    {
        $request = $this->getArticlesWithVideoRequest($page, $perPage);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            switch($statusCode) {
                case 200:
                    if ('\Bitween\DevTo\Model\ArticleVideo[]' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Bitween\DevTo\Model\ArticleVideo[]', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Bitween\DevTo\Model\ArticleVideo[]';
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = (string) $responseBody;
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Bitween\DevTo\Model\ArticleVideo[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getArticlesWithVideoAsync
     *
     * Articles with a video
     *
     * @param  int $page Pagination page. (optional, default to 1)
     * @param  int $perPage Page size (the number of items to return per page). (optional, default to 24)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getArticlesWithVideoAsync($page = 1, $perPage = 24)
    {
        return $this->getArticlesWithVideoAsyncWithHttpInfo($page, $perPage)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getArticlesWithVideoAsyncWithHttpInfo
     *
     * Articles with a video
     *
     * @param  int $page Pagination page. (optional, default to 1)
     * @param  int $perPage Page size (the number of items to return per page). (optional, default to 24)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getArticlesWithVideoAsyncWithHttpInfo($page = 1, $perPage = 24)
    {
        $returnType = '\Bitween\DevTo\Model\ArticleVideo[]';
        $request = $this->getArticlesWithVideoRequest($page, $perPage);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getArticlesWithVideo'
     *
     * @param  int $page Pagination page. (optional, default to 1)
     * @param  int $perPage Page size (the number of items to return per page). (optional, default to 24)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getArticlesWithVideoRequest($page = 1, $perPage = 24)
    {
        if ($page !== null && $page < 1) {
            throw new \InvalidArgumentException('invalid value for "$page" when calling ArticlesApi.getArticlesWithVideo, must be bigger than or equal to 1.');
        }

        if ($perPage !== null && $perPage > 1000) {
            throw new \InvalidArgumentException('invalid value for "$perPage" when calling ArticlesApi.getArticlesWithVideo, must be smaller than or equal to 1000.');
        }
        if ($perPage !== null && $perPage < 1) {
            throw new \InvalidArgumentException('invalid value for "$perPage" when calling ArticlesApi.getArticlesWithVideo, must be bigger than or equal to 1.');
        }


        $resourcePath = '/videos';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($page !== null) {
            if('form' === 'form' && is_array($page)) {
                foreach($page as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['page'] = $page;
            }
        }
        // query params
        if ($perPage !== null) {
            if('form' === 'form' && is_array($perPage)) {
                foreach($perPage as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['per_page'] = $perPage;
            }
        }




        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getUserAllArticles
     *
     * User's all articles
     *
     * @param  int $page Pagination page. (optional, default to 1)
     * @param  int $perPage Page size (the number of items to return per page). (optional, default to 30)
     *
     * @throws \Bitween\DevTo\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Bitween\DevTo\Model\ArticleMe[]|\Bitween\DevTo\Model\APIError
     */
    public function getUserAllArticles($page = 1, $perPage = 30)
    {
        list($response) = $this->getUserAllArticlesWithHttpInfo($page, $perPage);
        return $response;
    }

    /**
     * Operation getUserAllArticlesWithHttpInfo
     *
     * User's all articles
     *
     * @param  int $page Pagination page. (optional, default to 1)
     * @param  int $perPage Page size (the number of items to return per page). (optional, default to 30)
     *
     * @throws \Bitween\DevTo\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Bitween\DevTo\Model\ArticleMe[]|\Bitween\DevTo\Model\APIError, HTTP status code, HTTP response headers (array of strings)
     */
    public function getUserAllArticlesWithHttpInfo($page = 1, $perPage = 30)
    {
        $request = $this->getUserAllArticlesRequest($page, $perPage);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            switch($statusCode) {
                case 200:
                    if ('\Bitween\DevTo\Model\ArticleMe[]' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Bitween\DevTo\Model\ArticleMe[]', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 401:
                    if ('\Bitween\DevTo\Model\APIError' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Bitween\DevTo\Model\APIError', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Bitween\DevTo\Model\ArticleMe[]';
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = (string) $responseBody;
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Bitween\DevTo\Model\ArticleMe[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Bitween\DevTo\Model\APIError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getUserAllArticlesAsync
     *
     * User's all articles
     *
     * @param  int $page Pagination page. (optional, default to 1)
     * @param  int $perPage Page size (the number of items to return per page). (optional, default to 30)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getUserAllArticlesAsync($page = 1, $perPage = 30)
    {
        return $this->getUserAllArticlesAsyncWithHttpInfo($page, $perPage)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getUserAllArticlesAsyncWithHttpInfo
     *
     * User's all articles
     *
     * @param  int $page Pagination page. (optional, default to 1)
     * @param  int $perPage Page size (the number of items to return per page). (optional, default to 30)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getUserAllArticlesAsyncWithHttpInfo($page = 1, $perPage = 30)
    {
        $returnType = '\Bitween\DevTo\Model\ArticleMe[]';
        $request = $this->getUserAllArticlesRequest($page, $perPage);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getUserAllArticles'
     *
     * @param  int $page Pagination page. (optional, default to 1)
     * @param  int $perPage Page size (the number of items to return per page). (optional, default to 30)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getUserAllArticlesRequest($page = 1, $perPage = 30)
    {
        if ($page !== null && $page < 1) {
            throw new \InvalidArgumentException('invalid value for "$page" when calling ArticlesApi.getUserAllArticles, must be bigger than or equal to 1.');
        }

        if ($perPage !== null && $perPage > 1000) {
            throw new \InvalidArgumentException('invalid value for "$perPage" when calling ArticlesApi.getUserAllArticles, must be smaller than or equal to 1000.');
        }
        if ($perPage !== null && $perPage < 1) {
            throw new \InvalidArgumentException('invalid value for "$perPage" when calling ArticlesApi.getUserAllArticles, must be bigger than or equal to 1.');
        }


        $resourcePath = '/articles/me/all';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($page !== null) {
            if('form' === 'form' && is_array($page)) {
                foreach($page as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['page'] = $page;
            }
        }
        // query params
        if ($perPage !== null) {
            if('form' === 'form' && is_array($perPage)) {
                foreach($perPage as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['per_page'] = $perPage;
            }
        }




        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('api-key');
        if ($apiKey !== null) {
            $headers['api-key'] = $apiKey;
        }
        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }
        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getUserArticles
     *
     * User's articles
     *
     * @param  int $page Pagination page. (optional, default to 1)
     * @param  int $perPage Page size (the number of items to return per page). (optional, default to 30)
     *
     * @throws \Bitween\DevTo\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Bitween\DevTo\Model\ArticleMe[]|\Bitween\DevTo\Model\APIError
     */
    public function getUserArticles($page = 1, $perPage = 30)
    {
        list($response) = $this->getUserArticlesWithHttpInfo($page, $perPage);
        return $response;
    }

    /**
     * Operation getUserArticlesWithHttpInfo
     *
     * User's articles
     *
     * @param  int $page Pagination page. (optional, default to 1)
     * @param  int $perPage Page size (the number of items to return per page). (optional, default to 30)
     *
     * @throws \Bitween\DevTo\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Bitween\DevTo\Model\ArticleMe[]|\Bitween\DevTo\Model\APIError, HTTP status code, HTTP response headers (array of strings)
     */
    public function getUserArticlesWithHttpInfo($page = 1, $perPage = 30)
    {
        $request = $this->getUserArticlesRequest($page, $perPage);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            switch($statusCode) {
                case 200:
                    if ('\Bitween\DevTo\Model\ArticleMe[]' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Bitween\DevTo\Model\ArticleMe[]', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 401:
                    if ('\Bitween\DevTo\Model\APIError' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Bitween\DevTo\Model\APIError', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Bitween\DevTo\Model\ArticleMe[]';
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = (string) $responseBody;
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Bitween\DevTo\Model\ArticleMe[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Bitween\DevTo\Model\APIError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getUserArticlesAsync
     *
     * User's articles
     *
     * @param  int $page Pagination page. (optional, default to 1)
     * @param  int $perPage Page size (the number of items to return per page). (optional, default to 30)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getUserArticlesAsync($page = 1, $perPage = 30)
    {
        return $this->getUserArticlesAsyncWithHttpInfo($page, $perPage)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getUserArticlesAsyncWithHttpInfo
     *
     * User's articles
     *
     * @param  int $page Pagination page. (optional, default to 1)
     * @param  int $perPage Page size (the number of items to return per page). (optional, default to 30)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getUserArticlesAsyncWithHttpInfo($page = 1, $perPage = 30)
    {
        $returnType = '\Bitween\DevTo\Model\ArticleMe[]';
        $request = $this->getUserArticlesRequest($page, $perPage);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getUserArticles'
     *
     * @param  int $page Pagination page. (optional, default to 1)
     * @param  int $perPage Page size (the number of items to return per page). (optional, default to 30)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getUserArticlesRequest($page = 1, $perPage = 30)
    {
        if ($page !== null && $page < 1) {
            throw new \InvalidArgumentException('invalid value for "$page" when calling ArticlesApi.getUserArticles, must be bigger than or equal to 1.');
        }

        if ($perPage !== null && $perPage > 1000) {
            throw new \InvalidArgumentException('invalid value for "$perPage" when calling ArticlesApi.getUserArticles, must be smaller than or equal to 1000.');
        }
        if ($perPage !== null && $perPage < 1) {
            throw new \InvalidArgumentException('invalid value for "$perPage" when calling ArticlesApi.getUserArticles, must be bigger than or equal to 1.');
        }


        $resourcePath = '/articles/me';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($page !== null) {
            if('form' === 'form' && is_array($page)) {
                foreach($page as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['page'] = $page;
            }
        }
        // query params
        if ($perPage !== null) {
            if('form' === 'form' && is_array($perPage)) {
                foreach($perPage as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['per_page'] = $perPage;
            }
        }




        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('api-key');
        if ($apiKey !== null) {
            $headers['api-key'] = $apiKey;
        }
        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }
        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getUserPublishedArticles
     *
     * User's published articles
     *
     * @param  int $page Pagination page. (optional, default to 1)
     * @param  int $perPage Page size (the number of items to return per page). (optional, default to 30)
     *
     * @throws \Bitween\DevTo\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Bitween\DevTo\Model\ArticleMe[]|\Bitween\DevTo\Model\APIError
     */
    public function getUserPublishedArticles($page = 1, $perPage = 30)
    {
        list($response) = $this->getUserPublishedArticlesWithHttpInfo($page, $perPage);
        return $response;
    }

    /**
     * Operation getUserPublishedArticlesWithHttpInfo
     *
     * User's published articles
     *
     * @param  int $page Pagination page. (optional, default to 1)
     * @param  int $perPage Page size (the number of items to return per page). (optional, default to 30)
     *
     * @throws \Bitween\DevTo\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Bitween\DevTo\Model\ArticleMe[]|\Bitween\DevTo\Model\APIError, HTTP status code, HTTP response headers (array of strings)
     */
    public function getUserPublishedArticlesWithHttpInfo($page = 1, $perPage = 30)
    {
        $request = $this->getUserPublishedArticlesRequest($page, $perPage);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            switch($statusCode) {
                case 200:
                    if ('\Bitween\DevTo\Model\ArticleMe[]' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Bitween\DevTo\Model\ArticleMe[]', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 401:
                    if ('\Bitween\DevTo\Model\APIError' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Bitween\DevTo\Model\APIError', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Bitween\DevTo\Model\ArticleMe[]';
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = (string) $responseBody;
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Bitween\DevTo\Model\ArticleMe[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Bitween\DevTo\Model\APIError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getUserPublishedArticlesAsync
     *
     * User's published articles
     *
     * @param  int $page Pagination page. (optional, default to 1)
     * @param  int $perPage Page size (the number of items to return per page). (optional, default to 30)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getUserPublishedArticlesAsync($page = 1, $perPage = 30)
    {
        return $this->getUserPublishedArticlesAsyncWithHttpInfo($page, $perPage)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getUserPublishedArticlesAsyncWithHttpInfo
     *
     * User's published articles
     *
     * @param  int $page Pagination page. (optional, default to 1)
     * @param  int $perPage Page size (the number of items to return per page). (optional, default to 30)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getUserPublishedArticlesAsyncWithHttpInfo($page = 1, $perPage = 30)
    {
        $returnType = '\Bitween\DevTo\Model\ArticleMe[]';
        $request = $this->getUserPublishedArticlesRequest($page, $perPage);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getUserPublishedArticles'
     *
     * @param  int $page Pagination page. (optional, default to 1)
     * @param  int $perPage Page size (the number of items to return per page). (optional, default to 30)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getUserPublishedArticlesRequest($page = 1, $perPage = 30)
    {
        if ($page !== null && $page < 1) {
            throw new \InvalidArgumentException('invalid value for "$page" when calling ArticlesApi.getUserPublishedArticles, must be bigger than or equal to 1.');
        }

        if ($perPage !== null && $perPage > 1000) {
            throw new \InvalidArgumentException('invalid value for "$perPage" when calling ArticlesApi.getUserPublishedArticles, must be smaller than or equal to 1000.');
        }
        if ($perPage !== null && $perPage < 1) {
            throw new \InvalidArgumentException('invalid value for "$perPage" when calling ArticlesApi.getUserPublishedArticles, must be bigger than or equal to 1.');
        }


        $resourcePath = '/articles/me/published';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($page !== null) {
            if('form' === 'form' && is_array($page)) {
                foreach($page as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['page'] = $page;
            }
        }
        // query params
        if ($perPage !== null) {
            if('form' === 'form' && is_array($perPage)) {
                foreach($perPage as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['per_page'] = $perPage;
            }
        }




        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('api-key');
        if ($apiKey !== null) {
            $headers['api-key'] = $apiKey;
        }
        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }
        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getUserUnpublishedArticles
     *
     * User's unpublished articles
     *
     * @param  int $page Pagination page. (optional, default to 1)
     * @param  int $perPage Page size (the number of items to return per page). (optional, default to 30)
     *
     * @throws \Bitween\DevTo\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Bitween\DevTo\Model\ArticleMe[]|\Bitween\DevTo\Model\APIError
     */
    public function getUserUnpublishedArticles($page = 1, $perPage = 30)
    {
        list($response) = $this->getUserUnpublishedArticlesWithHttpInfo($page, $perPage);
        return $response;
    }

    /**
     * Operation getUserUnpublishedArticlesWithHttpInfo
     *
     * User's unpublished articles
     *
     * @param  int $page Pagination page. (optional, default to 1)
     * @param  int $perPage Page size (the number of items to return per page). (optional, default to 30)
     *
     * @throws \Bitween\DevTo\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Bitween\DevTo\Model\ArticleMe[]|\Bitween\DevTo\Model\APIError, HTTP status code, HTTP response headers (array of strings)
     */
    public function getUserUnpublishedArticlesWithHttpInfo($page = 1, $perPage = 30)
    {
        $request = $this->getUserUnpublishedArticlesRequest($page, $perPage);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            switch($statusCode) {
                case 200:
                    if ('\Bitween\DevTo\Model\ArticleMe[]' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Bitween\DevTo\Model\ArticleMe[]', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 401:
                    if ('\Bitween\DevTo\Model\APIError' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Bitween\DevTo\Model\APIError', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Bitween\DevTo\Model\ArticleMe[]';
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = (string) $responseBody;
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Bitween\DevTo\Model\ArticleMe[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Bitween\DevTo\Model\APIError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getUserUnpublishedArticlesAsync
     *
     * User's unpublished articles
     *
     * @param  int $page Pagination page. (optional, default to 1)
     * @param  int $perPage Page size (the number of items to return per page). (optional, default to 30)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getUserUnpublishedArticlesAsync($page = 1, $perPage = 30)
    {
        return $this->getUserUnpublishedArticlesAsyncWithHttpInfo($page, $perPage)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getUserUnpublishedArticlesAsyncWithHttpInfo
     *
     * User's unpublished articles
     *
     * @param  int $page Pagination page. (optional, default to 1)
     * @param  int $perPage Page size (the number of items to return per page). (optional, default to 30)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getUserUnpublishedArticlesAsyncWithHttpInfo($page = 1, $perPage = 30)
    {
        $returnType = '\Bitween\DevTo\Model\ArticleMe[]';
        $request = $this->getUserUnpublishedArticlesRequest($page, $perPage);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getUserUnpublishedArticles'
     *
     * @param  int $page Pagination page. (optional, default to 1)
     * @param  int $perPage Page size (the number of items to return per page). (optional, default to 30)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getUserUnpublishedArticlesRequest($page = 1, $perPage = 30)
    {
        if ($page !== null && $page < 1) {
            throw new \InvalidArgumentException('invalid value for "$page" when calling ArticlesApi.getUserUnpublishedArticles, must be bigger than or equal to 1.');
        }

        if ($perPage !== null && $perPage > 1000) {
            throw new \InvalidArgumentException('invalid value for "$perPage" when calling ArticlesApi.getUserUnpublishedArticles, must be smaller than or equal to 1000.');
        }
        if ($perPage !== null && $perPage < 1) {
            throw new \InvalidArgumentException('invalid value for "$perPage" when calling ArticlesApi.getUserUnpublishedArticles, must be bigger than or equal to 1.');
        }


        $resourcePath = '/articles/me/unpublished';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($page !== null) {
            if('form' === 'form' && is_array($page)) {
                foreach($page as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['page'] = $page;
            }
        }
        // query params
        if ($perPage !== null) {
            if('form' === 'form' && is_array($perPage)) {
                foreach($perPage as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['per_page'] = $perPage;
            }
        }




        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('api-key');
        if ($apiKey !== null) {
            $headers['api-key'] = $apiKey;
        }
        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }
        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation updateArticle
     *
     * Update an article
     *
     * @param  int $id Id of the article (required)
     * @param  \Bitween\DevTo\Model\ArticleUpdate $articleUpdate Article params for the update.  *Note: if the article contains a front matter in its body, its front matter properties will still take precedence over any JSON equivalent params, which means that the full body_markdown with the modified front matter params needs to be provided for an update to be successful* (optional)
     *
     * @throws \Bitween\DevTo\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Bitween\DevTo\Model\ArticleShow|\Bitween\DevTo\Model\APIError|\Bitween\DevTo\Model\APIError|\Bitween\DevTo\Model\APIError|\Bitween\DevTo\Model\APIError|\Bitween\DevTo\Model\APIError
     */
    public function updateArticle($id, $articleUpdate = null)
    {
        list($response) = $this->updateArticleWithHttpInfo($id, $articleUpdate);
        return $response;
    }

    /**
     * Operation updateArticleWithHttpInfo
     *
     * Update an article
     *
     * @param  int $id Id of the article (required)
     * @param  \Bitween\DevTo\Model\ArticleUpdate $articleUpdate Article params for the update.  *Note: if the article contains a front matter in its body, its front matter properties will still take precedence over any JSON equivalent params, which means that the full body_markdown with the modified front matter params needs to be provided for an update to be successful* (optional)
     *
     * @throws \Bitween\DevTo\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Bitween\DevTo\Model\ArticleShow|\Bitween\DevTo\Model\APIError|\Bitween\DevTo\Model\APIError|\Bitween\DevTo\Model\APIError|\Bitween\DevTo\Model\APIError|\Bitween\DevTo\Model\APIError, HTTP status code, HTTP response headers (array of strings)
     */
    public function updateArticleWithHttpInfo($id, $articleUpdate = null)
    {
        $request = $this->updateArticleRequest($id, $articleUpdate);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            switch($statusCode) {
                case 200:
                    if ('\Bitween\DevTo\Model\ArticleShow' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Bitween\DevTo\Model\ArticleShow', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('\Bitween\DevTo\Model\APIError' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Bitween\DevTo\Model\APIError', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 401:
                    if ('\Bitween\DevTo\Model\APIError' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Bitween\DevTo\Model\APIError', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 403:
                    if ('\Bitween\DevTo\Model\APIError' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Bitween\DevTo\Model\APIError', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 422:
                    if ('\Bitween\DevTo\Model\APIError' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Bitween\DevTo\Model\APIError', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 429:
                    if ('\Bitween\DevTo\Model\APIError' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Bitween\DevTo\Model\APIError', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Bitween\DevTo\Model\ArticleShow';
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = (string) $responseBody;
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Bitween\DevTo\Model\ArticleShow',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Bitween\DevTo\Model\APIError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Bitween\DevTo\Model\APIError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Bitween\DevTo\Model\APIError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 422:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Bitween\DevTo\Model\APIError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 429:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Bitween\DevTo\Model\APIError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation updateArticleAsync
     *
     * Update an article
     *
     * @param  int $id Id of the article (required)
     * @param  \Bitween\DevTo\Model\ArticleUpdate $articleUpdate Article params for the update.  *Note: if the article contains a front matter in its body, its front matter properties will still take precedence over any JSON equivalent params, which means that the full body_markdown with the modified front matter params needs to be provided for an update to be successful* (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateArticleAsync($id, $articleUpdate = null)
    {
        return $this->updateArticleAsyncWithHttpInfo($id, $articleUpdate)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation updateArticleAsyncWithHttpInfo
     *
     * Update an article
     *
     * @param  int $id Id of the article (required)
     * @param  \Bitween\DevTo\Model\ArticleUpdate $articleUpdate Article params for the update.  *Note: if the article contains a front matter in its body, its front matter properties will still take precedence over any JSON equivalent params, which means that the full body_markdown with the modified front matter params needs to be provided for an update to be successful* (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateArticleAsyncWithHttpInfo($id, $articleUpdate = null)
    {
        $returnType = '\Bitween\DevTo\Model\ArticleShow';
        $request = $this->updateArticleRequest($id, $articleUpdate);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'updateArticle'
     *
     * @param  int $id Id of the article (required)
     * @param  \Bitween\DevTo\Model\ArticleUpdate $articleUpdate Article params for the update.  *Note: if the article contains a front matter in its body, its front matter properties will still take precedence over any JSON equivalent params, which means that the full body_markdown with the modified front matter params needs to be provided for an update to be successful* (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function updateArticleRequest($id, $articleUpdate = null)
    {
        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling updateArticle'
            );
        }
        if ($id < 1) {
            throw new \InvalidArgumentException('invalid value for "$id" when calling ArticlesApi.updateArticle, must be bigger than or equal to 1.');
        }


        $resourcePath = '/articles/{id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($articleUpdate)) {
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($articleUpdate));
            } else {
                $httpBody = $articleUpdate;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('api-key');
        if ($apiKey !== null) {
            $headers['api-key'] = $apiKey;
        }
        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }
        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'PUT',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
