<?php
/**
 * ArticleVideo
 *
 * PHP version 7.2
 *
 * @category Class
 * @package  Bitween\DevTo
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * DEV API (beta)
 *
 * Access Forem articles, users and other resources via API.  For a real-world example of Forem in action, check out [DEV](https://www.dev.to).  All endpoints that don't require authentication are CORS enabled.  Dates and date times, unless otherwise specified, must be in the [RFC 3339](https://tools.ietf.org/html/rfc3339) format.  # Authentication  <!-- ReDoc-Inject: <security-definitions> -->
 *
 * The version of the OpenAPI document: 0.9.5
 * Contact: yo@dev.to
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.0.1
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Bitween\DevTo\Model;

use \ArrayAccess;
use \Bitween\DevTo\ObjectSerializer;

/**
 * ArticleVideo Class Doc Comment
 *
 * @category Class
 * @package  Bitween\DevTo
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<TKey, TValue>
 * @template TKey int|null
 * @template TValue mixed|null  
 */
class ArticleVideo implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'ArticleVideo';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'typeOf' => 'string',
        'id' => 'int',
        'path' => 'string',
        'cloudinaryVideoUrl' => 'string',
        'title' => 'string',
        'userId' => 'int',
        'videoDurationInMinutes' => 'string',
        'videoSourceUrl' => 'string',
        'user' => '\Bitween\DevTo\Model\ArticleVideoUser'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'typeOf' => null,
        'id' => 'int32',
        'path' => null,
        'cloudinaryVideoUrl' => 'url',
        'title' => null,
        'userId' => 'int32',
        'videoDurationInMinutes' => null,
        'videoSourceUrl' => 'url',
        'user' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'typeOf' => 'type_of',
        'id' => 'id',
        'path' => 'path',
        'cloudinaryVideoUrl' => 'cloudinary_video_url',
        'title' => 'title',
        'userId' => 'user_id',
        'videoDurationInMinutes' => 'video_duration_in_minutes',
        'videoSourceUrl' => 'video_source_url',
        'user' => 'user'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'typeOf' => 'setTypeOf',
        'id' => 'setId',
        'path' => 'setPath',
        'cloudinaryVideoUrl' => 'setCloudinaryVideoUrl',
        'title' => 'setTitle',
        'userId' => 'setUserId',
        'videoDurationInMinutes' => 'setVideoDurationInMinutes',
        'videoSourceUrl' => 'setVideoSourceUrl',
        'user' => 'setUser'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'typeOf' => 'getTypeOf',
        'id' => 'getId',
        'path' => 'getPath',
        'cloudinaryVideoUrl' => 'getCloudinaryVideoUrl',
        'title' => 'getTitle',
        'userId' => 'getUserId',
        'videoDurationInMinutes' => 'getVideoDurationInMinutes',
        'videoSourceUrl' => 'getVideoSourceUrl',
        'user' => 'getUser'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['typeOf'] = $data['typeOf'] ?? null;
        $this->container['id'] = $data['id'] ?? null;
        $this->container['path'] = $data['path'] ?? null;
        $this->container['cloudinaryVideoUrl'] = $data['cloudinaryVideoUrl'] ?? null;
        $this->container['title'] = $data['title'] ?? null;
        $this->container['userId'] = $data['userId'] ?? null;
        $this->container['videoDurationInMinutes'] = $data['videoDurationInMinutes'] ?? null;
        $this->container['videoSourceUrl'] = $data['videoSourceUrl'] ?? null;
        $this->container['user'] = $data['user'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['typeOf'] === null) {
            $invalidProperties[] = "'typeOf' can't be null";
        }
        if ($this->container['id'] === null) {
            $invalidProperties[] = "'id' can't be null";
        }
        if ($this->container['path'] === null) {
            $invalidProperties[] = "'path' can't be null";
        }
        if ($this->container['cloudinaryVideoUrl'] === null) {
            $invalidProperties[] = "'cloudinaryVideoUrl' can't be null";
        }
        if ($this->container['title'] === null) {
            $invalidProperties[] = "'title' can't be null";
        }
        if ($this->container['userId'] === null) {
            $invalidProperties[] = "'userId' can't be null";
        }
        if ($this->container['videoDurationInMinutes'] === null) {
            $invalidProperties[] = "'videoDurationInMinutes' can't be null";
        }
        if ($this->container['videoSourceUrl'] === null) {
            $invalidProperties[] = "'videoSourceUrl' can't be null";
        }
        if ($this->container['user'] === null) {
            $invalidProperties[] = "'user' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets typeOf
     *
     * @return string
     */
    public function getTypeOf()
    {
        return $this->container['typeOf'];
    }

    /**
     * Sets typeOf
     *
     * @param string $typeOf typeOf
     *
     * @return self
     */
    public function setTypeOf($typeOf)
    {
        $this->container['typeOf'] = $typeOf;

        return $this;
    }

    /**
     * Gets id
     *
     * @return int
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param int $id id
     *
     * @return self
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets path
     *
     * @return string
     */
    public function getPath()
    {
        return $this->container['path'];
    }

    /**
     * Sets path
     *
     * @param string $path path
     *
     * @return self
     */
    public function setPath($path)
    {
        $this->container['path'] = $path;

        return $this;
    }

    /**
     * Gets cloudinaryVideoUrl
     *
     * @return string
     */
    public function getCloudinaryVideoUrl()
    {
        return $this->container['cloudinaryVideoUrl'];
    }

    /**
     * Sets cloudinaryVideoUrl
     *
     * @param string $cloudinaryVideoUrl The preview image of the video
     *
     * @return self
     */
    public function setCloudinaryVideoUrl($cloudinaryVideoUrl)
    {
        $this->container['cloudinaryVideoUrl'] = $cloudinaryVideoUrl;

        return $this;
    }

    /**
     * Gets title
     *
     * @return string
     */
    public function getTitle()
    {
        return $this->container['title'];
    }

    /**
     * Sets title
     *
     * @param string $title title
     *
     * @return self
     */
    public function setTitle($title)
    {
        $this->container['title'] = $title;

        return $this;
    }

    /**
     * Gets userId
     *
     * @return int
     */
    public function getUserId()
    {
        return $this->container['userId'];
    }

    /**
     * Sets userId
     *
     * @param int $userId userId
     *
     * @return self
     */
    public function setUserId($userId)
    {
        $this->container['userId'] = $userId;

        return $this;
    }

    /**
     * Gets videoDurationInMinutes
     *
     * @return string
     */
    public function getVideoDurationInMinutes()
    {
        return $this->container['videoDurationInMinutes'];
    }

    /**
     * Sets videoDurationInMinutes
     *
     * @param string $videoDurationInMinutes The duration of the video.  If the video duration is below 1 hour, the format will be `mm:ss`, if it's 1 hour or above the format will be `h:mm:ss`.
     *
     * @return self
     */
    public function setVideoDurationInMinutes($videoDurationInMinutes)
    {
        $this->container['videoDurationInMinutes'] = $videoDurationInMinutes;

        return $this;
    }

    /**
     * Gets videoSourceUrl
     *
     * @return string
     */
    public function getVideoSourceUrl()
    {
        return $this->container['videoSourceUrl'];
    }

    /**
     * Sets videoSourceUrl
     *
     * @param string $videoSourceUrl videoSourceUrl
     *
     * @return self
     */
    public function setVideoSourceUrl($videoSourceUrl)
    {
        $this->container['videoSourceUrl'] = $videoSourceUrl;

        return $this;
    }

    /**
     * Gets user
     *
     * @return \Bitween\DevTo\Model\ArticleVideoUser
     */
    public function getUser()
    {
        return $this->container['user'];
    }

    /**
     * Sets user
     *
     * @param \Bitween\DevTo\Model\ArticleVideoUser $user user
     *
     * @return self
     */
    public function setUser($user)
    {
        $this->container['user'] = $user;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


